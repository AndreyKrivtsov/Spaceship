// Code generated by protoc-gen-go. DO NOT EDIT.
// source: socketapi/socketapi.proto

package socketapi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/timestamp"
import _ "github.com/golang/protobuf/ptypes/wrappers"
import _ "spaceship/api"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The selection of possible error codes.
type Error_Code int32

const (
	// An unexpected result from the server.
	Error_RUNTIME_EXCEPTION Error_Code = 0
	// The server received a message which is not recognised.
	Error_UNRECOGNIZED_PAYLOAD Error_Code = 1
	// A message was expected but contains no content.
	Error_MISSING_PAYLOAD Error_Code = 2
	// Fields in the message have an invalid format.
	Error_BAD_INPUT Error_Code = 3
	// The match id was not found.
	Error_MATCH_NOT_FOUND Error_Code = 4
	// The match join was rejected.
	Error_MATCH_JOIN_REJECTED Error_Code = 5
	// The runtime function does not exist on the server.
	Error_RUNTIME_FUNCTION_NOT_FOUND Error_Code = 6
	// The runtime function executed with an error.
	Error_RUNTIME_FUNCTION_EXCEPTION Error_Code = 7
	// Generic not found error code
	Error_NOT_FOUND Error_Code = 8
)

var Error_Code_name = map[int32]string{
	0: "RUNTIME_EXCEPTION",
	1: "UNRECOGNIZED_PAYLOAD",
	2: "MISSING_PAYLOAD",
	3: "BAD_INPUT",
	4: "MATCH_NOT_FOUND",
	5: "MATCH_JOIN_REJECTED",
	6: "RUNTIME_FUNCTION_NOT_FOUND",
	7: "RUNTIME_FUNCTION_EXCEPTION",
	8: "NOT_FOUND",
}
var Error_Code_value = map[string]int32{
	"RUNTIME_EXCEPTION":          0,
	"UNRECOGNIZED_PAYLOAD":       1,
	"MISSING_PAYLOAD":            2,
	"BAD_INPUT":                  3,
	"MATCH_NOT_FOUND":            4,
	"MATCH_JOIN_REJECTED":        5,
	"RUNTIME_FUNCTION_NOT_FOUND": 6,
	"RUNTIME_FUNCTION_EXCEPTION": 7,
	"NOT_FOUND":                  8,
}

func (x Error_Code) String() string {
	return proto.EnumName(Error_Code_name, int32(x))
}
func (Error_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_socketapi_0b984ba4c82f64d7, []int{2, 0}
}

type Envelope struct {
	Cid string `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty"`
	// Types that are valid to be assigned to Message:
	//	*Envelope_Error
	//	*Envelope_MatchStart
	//	*Envelope_MatchUpdate
	Message              isEnvelope_Message `protobuf_oneof:"message"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Envelope) Reset()         { *m = Envelope{} }
func (m *Envelope) String() string { return proto.CompactTextString(m) }
func (*Envelope) ProtoMessage()    {}
func (*Envelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_socketapi_0b984ba4c82f64d7, []int{0}
}
func (m *Envelope) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Envelope.Unmarshal(m, b)
}
func (m *Envelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Envelope.Marshal(b, m, deterministic)
}
func (dst *Envelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Envelope.Merge(dst, src)
}
func (m *Envelope) XXX_Size() int {
	return xxx_messageInfo_Envelope.Size(m)
}
func (m *Envelope) XXX_DiscardUnknown() {
	xxx_messageInfo_Envelope.DiscardUnknown(m)
}

var xxx_messageInfo_Envelope proto.InternalMessageInfo

func (m *Envelope) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

type isEnvelope_Message interface {
	isEnvelope_Message()
}

type Envelope_Error struct {
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

type Envelope_MatchStart struct {
	MatchStart *MatchStart `protobuf:"bytes,3,opt,name=match_start,json=matchStart,proto3,oneof"`
}

type Envelope_MatchUpdate struct {
	MatchUpdate *MatchUpdate `protobuf:"bytes,4,opt,name=match_update,json=matchUpdate,proto3,oneof"`
}

func (*Envelope_Error) isEnvelope_Message() {}

func (*Envelope_MatchStart) isEnvelope_Message() {}

func (*Envelope_MatchUpdate) isEnvelope_Message() {}

func (m *Envelope) GetMessage() isEnvelope_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Envelope) GetError() *Error {
	if x, ok := m.GetMessage().(*Envelope_Error); ok {
		return x.Error
	}
	return nil
}

func (m *Envelope) GetMatchStart() *MatchStart {
	if x, ok := m.GetMessage().(*Envelope_MatchStart); ok {
		return x.MatchStart
	}
	return nil
}

func (m *Envelope) GetMatchUpdate() *MatchUpdate {
	if x, ok := m.GetMessage().(*Envelope_MatchUpdate); ok {
		return x.MatchUpdate
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Envelope) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Envelope_OneofMarshaler, _Envelope_OneofUnmarshaler, _Envelope_OneofSizer, []interface{}{
		(*Envelope_Error)(nil),
		(*Envelope_MatchStart)(nil),
		(*Envelope_MatchUpdate)(nil),
	}
}

func _Envelope_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Envelope)
	// message
	switch x := m.Message.(type) {
	case *Envelope_Error:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Error); err != nil {
			return err
		}
	case *Envelope_MatchStart:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MatchStart); err != nil {
			return err
		}
	case *Envelope_MatchUpdate:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MatchUpdate); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Envelope.Message has unexpected type %T", x)
	}
	return nil
}

func _Envelope_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Envelope)
	switch tag {
	case 2: // message.error
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Error)
		err := b.DecodeMessage(msg)
		m.Message = &Envelope_Error{msg}
		return true, err
	case 3: // message.match_start
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MatchStart)
		err := b.DecodeMessage(msg)
		m.Message = &Envelope_MatchStart{msg}
		return true, err
	case 4: // message.match_update
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MatchUpdate)
		err := b.DecodeMessage(msg)
		m.Message = &Envelope_MatchUpdate{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Envelope_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Envelope)
	// message
	switch x := m.Message.(type) {
	case *Envelope_Error:
		s := proto.Size(x.Error)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Envelope_MatchStart:
		s := proto.Size(x.MatchStart)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Envelope_MatchUpdate:
		s := proto.Size(x.MatchUpdate)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type MatchUpdate struct {
	GameID string `protobuf:"bytes,1,opt,name=gameID,proto3" json:"gameID,omitempty"`
	// TODO: this can be retrieved from gameID by fetching game from redis but does it cause unnecessary load on the redis ?
	GameName             string   `protobuf:"bytes,2,opt,name=gameName,proto3" json:"gameName,omitempty"`
	Metadata             string   `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MatchUpdate) Reset()         { *m = MatchUpdate{} }
func (m *MatchUpdate) String() string { return proto.CompactTextString(m) }
func (*MatchUpdate) ProtoMessage()    {}
func (*MatchUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_socketapi_0b984ba4c82f64d7, []int{1}
}
func (m *MatchUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchUpdate.Unmarshal(m, b)
}
func (m *MatchUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchUpdate.Marshal(b, m, deterministic)
}
func (dst *MatchUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchUpdate.Merge(dst, src)
}
func (m *MatchUpdate) XXX_Size() int {
	return xxx_messageInfo_MatchUpdate.Size(m)
}
func (m *MatchUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_MatchUpdate proto.InternalMessageInfo

func (m *MatchUpdate) GetGameID() string {
	if m != nil {
		return m.GameID
	}
	return ""
}

func (m *MatchUpdate) GetGameName() string {
	if m != nil {
		return m.GameName
	}
	return ""
}

func (m *MatchUpdate) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}

// A logical error which may occur on the server.
type Error struct {
	// The error code which should be one of "Error.Code" enums.
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// A message in English to help developers debug the response.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Additional error details which may be different for each response.
	Context              map[string]string `protobuf:"bytes,3,rep,name=context,proto3" json:"context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_socketapi_0b984ba4c82f64d7, []int{2}
}
func (m *Error) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Error.Unmarshal(m, b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Error.Marshal(b, m, deterministic)
}
func (dst *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(dst, src)
}
func (m *Error) XXX_Size() int {
	return xxx_messageInfo_Error.Size(m)
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Error) GetContext() map[string]string {
	if m != nil {
		return m.Context
	}
	return nil
}

type MatchStart struct {
	GameName             string   `protobuf:"bytes,1,opt,name=game_name,json=gameName,proto3" json:"game_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MatchStart) Reset()         { *m = MatchStart{} }
func (m *MatchStart) String() string { return proto.CompactTextString(m) }
func (*MatchStart) ProtoMessage()    {}
func (*MatchStart) Descriptor() ([]byte, []int) {
	return fileDescriptor_socketapi_0b984ba4c82f64d7, []int{3}
}
func (m *MatchStart) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchStart.Unmarshal(m, b)
}
func (m *MatchStart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchStart.Marshal(b, m, deterministic)
}
func (dst *MatchStart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchStart.Merge(dst, src)
}
func (m *MatchStart) XXX_Size() int {
	return xxx_messageInfo_MatchStart.Size(m)
}
func (m *MatchStart) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchStart.DiscardUnknown(m)
}

var xxx_messageInfo_MatchStart proto.InternalMessageInfo

func (m *MatchStart) GetGameName() string {
	if m != nil {
		return m.GameName
	}
	return ""
}

func init() {
	proto.RegisterType((*Envelope)(nil), "spaceship.socket.Envelope")
	proto.RegisterType((*MatchUpdate)(nil), "spaceship.socket.MatchUpdate")
	proto.RegisterType((*Error)(nil), "spaceship.socket.Error")
	proto.RegisterMapType((map[string]string)(nil), "spaceship.socket.Error.ContextEntry")
	proto.RegisterType((*MatchStart)(nil), "spaceship.socket.MatchStart")
	proto.RegisterEnum("spaceship.socket.Error_Code", Error_Code_name, Error_Code_value)
}

func init() {
	proto.RegisterFile("socketapi/socketapi.proto", fileDescriptor_socketapi_0b984ba4c82f64d7)
}

var fileDescriptor_socketapi_0b984ba4c82f64d7 = []byte{
	// 570 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x8e, 0xe3, 0xa4, 0xad, 0x27, 0x45, 0x35, 0xdb, 0x42, 0x4d, 0x80, 0xb6, 0x8a, 0x38, 0x94,
	0x8b, 0x23, 0x95, 0x0b, 0xea, 0x01, 0x94, 0xd8, 0x6e, 0xe3, 0x8a, 0xda, 0xc1, 0x3f, 0x12, 0x54,
	0x42, 0xd6, 0xd6, 0x59, 0x52, 0xab, 0x75, 0xbc, 0xb2, 0x37, 0x85, 0xbc, 0x03, 0x4f, 0xc1, 0x91,
	0x27, 0xe2, 0xc2, 0xbb, 0xa0, 0x5d, 0x27, 0x4e, 0x68, 0xe9, 0x6d, 0xbe, 0xf9, 0xbe, 0x99, 0xf9,
	0x76, 0xc6, 0x86, 0x67, 0x45, 0x16, 0x5f, 0x13, 0x86, 0x69, 0xd2, 0xad, 0x22, 0x9d, 0xe6, 0x19,
	0xcb, 0x90, 0x5a, 0x50, 0x1c, 0x93, 0xe2, 0x2a, 0xa1, 0x7a, 0x49, 0xb5, 0xf7, 0xc7, 0x59, 0x36,
	0xbe, 0x21, 0x5d, 0xc1, 0x5f, 0x4e, 0xbf, 0x76, 0x59, 0x92, 0x92, 0x82, 0xe1, 0x94, 0x96, 0x25,
	0xed, 0xbd, 0xbb, 0x82, 0x6f, 0x39, 0xa6, 0x94, 0xe4, 0xc5, 0x9c, 0xdf, 0xad, 0x5a, 0x76, 0xf9,
	0xc4, 0x6a, 0x56, 0xe7, 0x8f, 0x04, 0x1b, 0xd6, 0xe4, 0x96, 0xdc, 0x64, 0x94, 0x20, 0x15, 0xe4,
	0x38, 0x19, 0x69, 0xd2, 0x81, 0x74, 0xa8, 0x78, 0x3c, 0x44, 0x5d, 0x68, 0x92, 0x3c, 0xcf, 0x72,
	0xad, 0x7e, 0x20, 0x1d, 0xb6, 0x8e, 0x76, 0xf5, 0xbb, 0xd6, 0x74, 0x8b, 0xd3, 0x83, 0x9a, 0x57,
	0xea, 0xd0, 0x7b, 0x68, 0xa5, 0x98, 0xc5, 0x57, 0x51, 0xc1, 0x70, 0xce, 0x34, 0x59, 0x94, 0xbd,
	0xb8, 0x5f, 0x76, 0xce, 0x45, 0x3e, 0xd7, 0x0c, 0x6a, 0x1e, 0xa4, 0x15, 0x42, 0x7d, 0xd8, 0x2c,
	0x1b, 0x4c, 0xe9, 0x08, 0x33, 0xa2, 0x35, 0x44, 0x87, 0x97, 0x0f, 0x74, 0x08, 0x85, 0x68, 0x50,
	0xf3, 0xca, 0xa9, 0x25, 0xec, 0x2b, 0xb0, 0x9e, 0x92, 0xa2, 0xc0, 0x63, 0xd2, 0xf9, 0x02, 0xad,
	0x15, 0x21, 0x7a, 0x0a, 0x6b, 0x63, 0x9c, 0x12, 0xdb, 0x9c, 0x3f, 0x72, 0x8e, 0x50, 0x1b, 0x36,
	0x78, 0xe4, 0xe0, 0x94, 0x88, 0xa7, 0x2a, 0x5e, 0x85, 0x39, 0x97, 0x12, 0x86, 0x47, 0x98, 0x61,
	0xf1, 0x1e, 0xc5, 0xab, 0x70, 0xe7, 0x87, 0x0c, 0x4d, 0xb1, 0x01, 0x84, 0xa0, 0x11, 0x67, 0x23,
	0x22, 0xfa, 0x36, 0x3d, 0x11, 0x23, 0xad, 0xf2, 0x31, 0x6f, 0xba, 0x80, 0xe8, 0x1d, 0xac, 0xc7,
	0xd9, 0x84, 0x91, 0xef, 0x7c, 0x45, 0xf2, 0x61, 0xeb, 0xe8, 0xd5, 0x03, 0x9b, 0xd5, 0x8d, 0x52,
	0x66, 0x4d, 0x58, 0x3e, 0xf3, 0x16, 0x45, 0xed, 0x63, 0xd8, 0x5c, 0x25, 0xf8, 0xe5, 0xae, 0xc9,
	0x6c, 0x71, 0xb9, 0x6b, 0x32, 0x43, 0x3b, 0xd0, 0xbc, 0xc5, 0x37, 0xd3, 0xc5, 0xe4, 0x12, 0x1c,
	0xd7, 0xdf, 0x4a, 0x9d, 0xdf, 0x12, 0x34, 0x0c, 0x6e, 0xef, 0x09, 0x3c, 0xf6, 0x42, 0x27, 0xb0,
	0xcf, 0xad, 0xc8, 0xfa, 0x64, 0x58, 0xc3, 0xc0, 0x76, 0x1d, 0xb5, 0x86, 0x34, 0xd8, 0x09, 0x1d,
	0xcf, 0x32, 0xdc, 0x53, 0xc7, 0xbe, 0xb0, 0xcc, 0x68, 0xd8, 0xfb, 0xfc, 0xc1, 0xed, 0x99, 0xaa,
	0x84, 0xb6, 0x61, 0xeb, 0xdc, 0xf6, 0x7d, 0xdb, 0x39, 0xad, 0x92, 0x75, 0xf4, 0x08, 0x94, 0x7e,
	0xcf, 0x8c, 0x6c, 0x67, 0x18, 0x06, 0xaa, 0x2c, 0x34, 0xbd, 0xc0, 0x18, 0x44, 0x8e, 0x1b, 0x44,
	0x27, 0x6e, 0xe8, 0x98, 0x6a, 0x03, 0xed, 0xc2, 0x76, 0x99, 0x3c, 0x73, 0x6d, 0x27, 0xf2, 0xac,
	0x33, 0xcb, 0x08, 0x2c, 0x53, 0x6d, 0xa2, 0x3d, 0x68, 0x2f, 0x2c, 0x9c, 0x84, 0x8e, 0xc1, 0x1d,
	0xac, 0x14, 0xae, 0xfd, 0x97, 0x5f, 0x7a, 0x5d, 0xe7, 0xc3, 0x97, 0xf2, 0x8d, 0xce, 0x6b, 0x80,
	0xe5, 0x87, 0x85, 0x9e, 0x83, 0xc2, 0x8f, 0x18, 0x4d, 0xf8, 0x55, 0xa5, 0x7f, 0xaf, 0xda, 0xff,
	0x08, 0xfb, 0x2c, 0xd7, 0xe3, 0x2c, 0xd5, 0x31, 0xa5, 0xc5, 0xbd, 0xed, 0x63, 0x9a, 0xf4, 0xb7,
	0x7c, 0x9e, 0xf4, 0xaf, 0x12, 0xea, 0x8b, 0xdc, 0x50, 0xba, 0x50, 0x2a, 0xf6, 0x67, 0x5d, 0xf6,
	0xfd, 0xe1, 0xaf, 0xba, 0x52, 0x89, 0x2e, 0xd7, 0xc4, 0x2f, 0xf5, 0xe6, 0x6f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x09, 0x45, 0x5b, 0x71, 0xdb, 0x03, 0x00, 0x00,
}
