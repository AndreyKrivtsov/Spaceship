// Code generated by protoc-gen-go. DO NOT EDIT.
// source: apigrpc/apigrpc.proto

package apigrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import api "spaceship/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SpaceShipClient is the client API for SpaceShip service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SpaceShipClient interface {
	AuthenticateFingerprint(ctx context.Context, in *api.AuthenticateFingerprint, opts ...grpc.CallOption) (*api.Session, error)
	AuthenticateFacebook(ctx context.Context, in *api.AuthenticateFacebook, opts ...grpc.CallOption) (*api.Session, error)
	UpdateUser(ctx context.Context, in *api.UserUpdate, opts ...grpc.CallOption) (*api.User, error)
	AddNotificationToken(ctx context.Context, in *api.NotificationTokenUpdate, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateNotificationToken(ctx context.Context, in *api.NotificationTokenUpdate, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteNotificationToken(ctx context.Context, in *api.NotificationTokenUpdate, opts ...grpc.CallOption) (*empty.Empty, error)
	GetLeaderboard(ctx context.Context, in *api.LeaderboardRequest, opts ...grpc.CallOption) (*api.LeaderboardResponse, error)
	TestEcho(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*api.Session, error)
}

type spaceShipClient struct {
	cc *grpc.ClientConn
}

func NewSpaceShipClient(cc *grpc.ClientConn) SpaceShipClient {
	return &spaceShipClient{cc}
}

func (c *spaceShipClient) AuthenticateFingerprint(ctx context.Context, in *api.AuthenticateFingerprint, opts ...grpc.CallOption) (*api.Session, error) {
	out := new(api.Session)
	err := c.cc.Invoke(ctx, "/spaceship.api.SpaceShip/AuthenticateFingerprint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceShipClient) AuthenticateFacebook(ctx context.Context, in *api.AuthenticateFacebook, opts ...grpc.CallOption) (*api.Session, error) {
	out := new(api.Session)
	err := c.cc.Invoke(ctx, "/spaceship.api.SpaceShip/AuthenticateFacebook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceShipClient) UpdateUser(ctx context.Context, in *api.UserUpdate, opts ...grpc.CallOption) (*api.User, error) {
	out := new(api.User)
	err := c.cc.Invoke(ctx, "/spaceship.api.SpaceShip/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceShipClient) AddNotificationToken(ctx context.Context, in *api.NotificationTokenUpdate, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/spaceship.api.SpaceShip/AddNotificationToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceShipClient) UpdateNotificationToken(ctx context.Context, in *api.NotificationTokenUpdate, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/spaceship.api.SpaceShip/UpdateNotificationToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceShipClient) DeleteNotificationToken(ctx context.Context, in *api.NotificationTokenUpdate, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/spaceship.api.SpaceShip/DeleteNotificationToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceShipClient) GetLeaderboard(ctx context.Context, in *api.LeaderboardRequest, opts ...grpc.CallOption) (*api.LeaderboardResponse, error) {
	out := new(api.LeaderboardResponse)
	err := c.cc.Invoke(ctx, "/spaceship.api.SpaceShip/GetLeaderboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceShipClient) TestEcho(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*api.Session, error) {
	out := new(api.Session)
	err := c.cc.Invoke(ctx, "/spaceship.api.SpaceShip/TestEcho", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpaceShipServer is the server API for SpaceShip service.
type SpaceShipServer interface {
	AuthenticateFingerprint(context.Context, *api.AuthenticateFingerprint) (*api.Session, error)
	AuthenticateFacebook(context.Context, *api.AuthenticateFacebook) (*api.Session, error)
	UpdateUser(context.Context, *api.UserUpdate) (*api.User, error)
	AddNotificationToken(context.Context, *api.NotificationTokenUpdate) (*empty.Empty, error)
	UpdateNotificationToken(context.Context, *api.NotificationTokenUpdate) (*empty.Empty, error)
	DeleteNotificationToken(context.Context, *api.NotificationTokenUpdate) (*empty.Empty, error)
	GetLeaderboard(context.Context, *api.LeaderboardRequest) (*api.LeaderboardResponse, error)
	TestEcho(context.Context, *empty.Empty) (*api.Session, error)
}

func RegisterSpaceShipServer(s *grpc.Server, srv SpaceShipServer) {
	s.RegisterService(&_SpaceShip_serviceDesc, srv)
}

func _SpaceShip_AuthenticateFingerprint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.AuthenticateFingerprint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceShipServer).AuthenticateFingerprint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spaceship.api.SpaceShip/AuthenticateFingerprint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceShipServer).AuthenticateFingerprint(ctx, req.(*api.AuthenticateFingerprint))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpaceShip_AuthenticateFacebook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.AuthenticateFacebook)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceShipServer).AuthenticateFacebook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spaceship.api.SpaceShip/AuthenticateFacebook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceShipServer).AuthenticateFacebook(ctx, req.(*api.AuthenticateFacebook))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpaceShip_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.UserUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceShipServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spaceship.api.SpaceShip/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceShipServer).UpdateUser(ctx, req.(*api.UserUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpaceShip_AddNotificationToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.NotificationTokenUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceShipServer).AddNotificationToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spaceship.api.SpaceShip/AddNotificationToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceShipServer).AddNotificationToken(ctx, req.(*api.NotificationTokenUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpaceShip_UpdateNotificationToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.NotificationTokenUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceShipServer).UpdateNotificationToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spaceship.api.SpaceShip/UpdateNotificationToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceShipServer).UpdateNotificationToken(ctx, req.(*api.NotificationTokenUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpaceShip_DeleteNotificationToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.NotificationTokenUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceShipServer).DeleteNotificationToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spaceship.api.SpaceShip/DeleteNotificationToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceShipServer).DeleteNotificationToken(ctx, req.(*api.NotificationTokenUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpaceShip_GetLeaderboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.LeaderboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceShipServer).GetLeaderboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spaceship.api.SpaceShip/GetLeaderboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceShipServer).GetLeaderboard(ctx, req.(*api.LeaderboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpaceShip_TestEcho_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceShipServer).TestEcho(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spaceship.api.SpaceShip/TestEcho",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceShipServer).TestEcho(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _SpaceShip_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spaceship.api.SpaceShip",
	HandlerType: (*SpaceShipServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthenticateFingerprint",
			Handler:    _SpaceShip_AuthenticateFingerprint_Handler,
		},
		{
			MethodName: "AuthenticateFacebook",
			Handler:    _SpaceShip_AuthenticateFacebook_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _SpaceShip_UpdateUser_Handler,
		},
		{
			MethodName: "AddNotificationToken",
			Handler:    _SpaceShip_AddNotificationToken_Handler,
		},
		{
			MethodName: "UpdateNotificationToken",
			Handler:    _SpaceShip_UpdateNotificationToken_Handler,
		},
		{
			MethodName: "DeleteNotificationToken",
			Handler:    _SpaceShip_DeleteNotificationToken_Handler,
		},
		{
			MethodName: "GetLeaderboard",
			Handler:    _SpaceShip_GetLeaderboard_Handler,
		},
		{
			MethodName: "TestEcho",
			Handler:    _SpaceShip_TestEcho_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apigrpc/apigrpc.proto",
}

func init() { proto.RegisterFile("apigrpc/apigrpc.proto", fileDescriptor_apigrpc_754d1ef479dcf7f8) }

var fileDescriptor_apigrpc_754d1ef479dcf7f8 = []byte{
	// 656 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0xdf, 0x4e, 0x13, 0x4d,
	0x18, 0xc6, 0xbf, 0x2d, 0xc9, 0xf7, 0x95, 0xc9, 0xc7, 0x1f, 0x07, 0xa4, 0xb2, 0x4a, 0x52, 0x16,
	0x43, 0x94, 0xc0, 0x4c, 0x5b, 0x62, 0x48, 0x7a, 0xa2, 0x6d, 0x44, 0x83, 0x21, 0xa6, 0xb1, 0x60,
	0x22, 0x7a, 0x32, 0xdd, 0xbe, 0xdd, 0x8e, 0xb4, 0x33, 0xe3, 0xce, 0x14, 0x42, 0x9a, 0x9a, 0x88,
	0x67, 0x9e, 0x98, 0xe8, 0x1d, 0x78, 0xe8, 0xb9, 0x97, 0xe0, 0x15, 0x78, 0x0b, 0x5e, 0x88, 0x99,
	0xe9, 0x02, 0xa5, 0x50, 0x3c, 0xe2, 0x64, 0x37, 0x7d, 0xdf, 0x67, 0x9f, 0xdf, 0x93, 0xb7, 0x33,
	0x2f, 0xba, 0xc9, 0x14, 0x8f, 0x62, 0x15, 0xd2, 0xe4, 0x4d, 0x54, 0x2c, 0x8d, 0xc4, 0x13, 0x5a,
	0xb1, 0x10, 0x74, 0x93, 0x2b, 0xc2, 0x14, 0xf7, 0xef, 0x44, 0x52, 0x46, 0x2d, 0xb0, 0x22, 0xca,
	0x84, 0x90, 0x86, 0x19, 0x2e, 0x85, 0xee, 0x8b, 0xfd, 0xdb, 0x49, 0xd7, 0xfd, 0xaa, 0x75, 0x1a,
	0x14, 0xda, 0xca, 0x1c, 0x25, 0xcd, 0x55, 0xf7, 0x0a, 0xd7, 0x22, 0x10, 0x6b, 0xfa, 0x90, 0x45,
	0x11, 0xc4, 0x54, 0x2a, 0xf7, 0xf9, 0x25, 0x56, 0x99, 0x53, 0x6e, 0x9f, 0xa5, 0x78, 0xbf, 0x51,
	0x38, 0x4e, 0xa3, 0xf1, 0xaa, 0xed, 0x55, 0x9b, 0x5c, 0xe1, 0x4f, 0x1e, 0xca, 0x94, 0x3a, 0xa6,
	0x09, 0xc2, 0xf0, 0x90, 0x19, 0x78, 0xc2, 0x45, 0x04, 0xb1, 0x8a, 0xb9, 0x30, 0x78, 0x99, 0x9c,
	0xcb, 0x4e, 0x46, 0xe8, 0xfc, 0xb9, 0x21, 0x5d, 0x15, 0xb4, 0xe6, 0x52, 0x04, 0xf4, 0xf8, 0xd7,
	0xef, 0xaf, 0xa9, 0xfb, 0xc1, 0x5d, 0x7a, 0x90, 0xa7, 0x2c, 0x0c, 0x65, 0x47, 0x18, 0xca, 0x06,
	0x4c, 0x68, 0xe3, 0xcc, 0xa5, 0xe8, 0xad, 0xe0, 0x0f, 0x1e, 0x9a, 0x3d, 0x07, 0x61, 0x21, 0xd4,
	0xa4, 0xdc, 0xc7, 0x4b, 0x57, 0x25, 0x49, 0x44, 0x23, 0x63, 0xac, 0xba, 0x18, 0xcb, 0xc1, 0xe2,
	0xe8, 0x18, 0x89, 0x85, 0xcd, 0xf0, 0x1a, 0xa1, 0x5d, 0x55, 0x67, 0x06, 0x76, 0x35, 0xc4, 0x78,
	0x7e, 0xc8, 0xd3, 0x16, 0xfb, 0x6d, 0x7f, 0xe6, 0x92, 0x56, 0xb0, 0xe0, 0x58, 0x19, 0x1f, 0x0f,
	0xb2, 0x3a, 0xee, 0x03, 0x6b, 0xde, 0x45, 0xb3, 0xa5, 0x7a, 0xfd, 0xb9, 0x34, 0xbc, 0x61, 0xc9,
	0x5c, 0x8a, 0x1d, 0xb9, 0x0f, 0xe2, 0xc2, 0xa4, 0x2f, 0x28, 0x12, 0xe6, 0x1c, 0xe9, 0x1f, 0x10,
	0x72, 0x72, 0x40, 0xc8, 0xa6, 0x3d, 0x20, 0xc1, 0x92, 0xc3, 0x2e, 0x04, 0xb7, 0x06, 0xb1, 0x62,
	0xc0, 0xc4, 0xc2, 0xdf, 0xa3, 0x4c, 0xdf, 0xe6, 0xda, 0xf8, 0xfe, 0x95, 0xfc, 0x8f, 0x1e, 0xca,
	0x3c, 0x86, 0x16, 0x5c, 0x47, 0x80, 0x7b, 0x2e, 0x40, 0xb0, 0x92, 0x1d, 0x15, 0x80, 0x76, 0x8d,
	0xb5, 0xe9, 0xe1, 0x1f, 0x1e, 0x9a, 0x7c, 0x0a, 0x66, 0x1b, 0x58, 0x1d, 0xe2, 0x9a, 0x64, 0x71,
	0x1d, 0x2f, 0x0e, 0xc1, 0x07, 0x7a, 0x2f, 0xe0, 0x5d, 0x07, 0xb4, 0xf1, 0x83, 0xab, 0x24, 0x5a,
	0x49, 0xa1, 0x21, 0x78, 0xe3, 0x32, 0xbc, 0xc4, 0x81, 0xcd, 0xd0, 0x3a, 0x13, 0xd0, 0xae, 0x39,
	0x52, 0xd0, 0xa3, 0x6d, 0x59, 0x07, 0xda, 0xb5, 0xcf, 0xde, 0x5e, 0x0e, 0x93, 0xbf, 0xab, 0xa8,
	0x62, 0x11, 0xd0, 0xae, 0x7d, 0xf6, 0xf0, 0x36, 0x4a, 0xef, 0x80, 0x36, 0x9b, 0x61, 0x53, 0xe2,
	0x11, 0x53, 0x18, 0x79, 0x03, 0xa6, 0x5d, 0x32, 0x84, 0xd3, 0x96, 0x09, 0x61, 0x53, 0x96, 0x3f,
	0xa7, 0xbe, 0x94, 0x7e, 0x7a, 0xf8, 0x15, 0xba, 0xe1, 0x56, 0x41, 0xd6, 0xee, 0x82, 0x6c, 0xa9,
	0xb2, 0x95, 0x3d, 0xc8, 0x07, 0x0f, 0xd1, 0x5c, 0xa9, 0x52, 0xa9, 0x66, 0xb7, 0x44, 0x43, 0xc6,
	0x6d, 0x37, 0xbd, 0xec, 0x0e, 0x84, 0x4d, 0x82, 0x67, 0x9a, 0xc6, 0x28, 0x5d, 0xa4, 0x94, 0x29,
	0xa5, 0x49, 0x28, 0xdb, 0xc4, 0xc4, 0xfe, 0x34, 0x17, 0x0d, 0xf9, 0x68, 0xa0, 0x52, 0x18, 0xcb,
	0x93, 0x9c, 0x3f, 0x99, 0x2f, 0x6c, 0x90, 0x1c, 0xc9, 0x91, 0x7c, 0x71, 0x63, 0xfd, 0x41, 0x6e,
	0xc5, 0xf3, 0x0a, 0xd3, 0x4c, 0xa9, 0xd6, 0xc9, 0xff, 0xf1, 0x56, 0x4b, 0x51, 0xbc, 0x50, 0xd9,
	0xcb, 0xa2, 0x29, 0x34, 0x5e, 0x66, 0x9a, 0x87, 0xf6, 0x8e, 0xe3, 0x54, 0xda, 0x43, 0x13, 0x68,
	0xbc, 0x0c, 0x2c, 0x86, 0xf8, 0xd9, 0xa1, 0xc1, 0xff, 0xd4, 0xa6, 0x86, 0x0a, 0x68, 0xde, 0xc4,
	0x8e, 0xec, 0x22, 0x9c, 0x1b, 0x40, 0xf9, 0xff, 0xd3, 0x45, 0x57, 0x52, 0xbc, 0xe2, 0xed, 0xfd,
	0x97, 0xec, 0xe6, 0x6f, 0xa9, 0xb1, 0x6a, 0xb5, 0xf2, 0x3d, 0x75, 0xb6, 0x08, 0x6b, 0xff, 0xba,
	0x59, 0xae, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x97, 0xf5, 0x34, 0xb1, 0xc7, 0x05, 0x00, 0x00,
}
